import pytest

import deltares_coastal_structures_toolbox.functions.structural.stability_rock_rear.vangentpozueta2004 as vangentpozueta2004


@pytest.mark.parametrize(
    (
        "cot_alpha, cot_phi, gamma_f, gamma_f_Crest, S, Hs, Tmm10, Rc, Rc_rear, Bc, N_waves, rho_rock"
    ),
    (
        (
            [
                3.0,
                2.0,
                0.47,
                0.47,
                2.0,
                5.0,
                10.0,
                5.0,
                5.0,
                4.0,
                1000,
                2650,
            ]
        ),
        (
            [
                2.5,
                2.0,
                0.47,
                0.47,
                2.0,
                5.0,
                10.0,
                5.0,
                5.0,
                4.0,
                1000,
                2650,
            ]
        ),
        (
            [
                3.0,
                3.0,
                0.47,
                0.47,
                2.0,
                5.0,
                10.0,
                5.0,
                5.0,
                4.0,
                1000,
                2650,
            ]
        ),
        (
            [
                3.0,
                2.0,
                0.55,
                0.47,
                2.0,
                5.0,
                10.0,
                5.0,
                5.0,
                4.0,
                1000,
                2650,
            ]
        ),
        (
            [
                3.0,
                2.0,
                0.47,
                0.55,
                2.0,
                5.0,
                10.0,
                5.0,
                5.0,
                4.0,
                1000,
                2650,
            ]
        ),
        (
            [
                3.0,
                2.0,
                0.47,
                0.47,
                4.0,
                5.0,
                10.0,
                5.0,
                5.0,
                4.0,
                1000,
                2650,
            ]
        ),
        (
            [
                3.0,
                2.0,
                0.47,
                0.47,
                2.0,
                6.0,
                10.0,
                5.0,
                5.0,
                4.0,
                1000,
                2650,
            ]
        ),
        (
            [
                3.0,
                2.0,
                0.47,
                0.47,
                2.0,
                5.0,
                12.0,
                5.0,
                5.0,
                4.0,
                1000,
                2650,
            ]
        ),
        (
            [
                3.0,
                2.0,
                0.47,
                0.47,
                2.0,
                5.0,
                10.0,
                4.5,
                5.0,
                4.0,
                1000,
                2650,
            ]
        ),
        (
            [
                3.0,
                2.0,
                0.47,
                0.47,
                2.0,
                5.0,
                10.0,
                5.0,
                4.5,
                4.0,
                1000,
                2650,
            ]
        ),
        (
            [
                3.0,
                2.0,
                0.47,
                0.47,
                2.0,
                5.0,
                10.0,
                5.0,
                5.0,
                6.0,
                1000,
                2650,
            ]
        ),
        (
            [
                3.0,
                2.0,
                0.47,
                0.47,
                2.0,
                5.0,
                10.0,
                5.0,
                5.0,
                4.0,
                2000,
                2650,
            ]
        ),
        (
            [
                3.0,
                2.0,
                0.47,
                0.47,
                2.0,
                5.0,
                10.0,
                5.0,
                5.0,
                4.0,
                1000,
                2850,
            ]
        ),
    ),
)
def test_internal_consistency_S_Dn50(
    cot_alpha,
    cot_phi,
    gamma_f,
    gamma_f_Crest,
    S,
    Hs,
    Tmm10,
    Rc,
    Rc_rear,
    Bc,
    N_waves,
    rho_rock,
):
    Dn50_calculated = vangentpozueta2004.calculate_nominal_rock_diameter_Dn50(
        cot_alpha=cot_alpha,
        cot_phi=cot_phi,
        gamma_f=gamma_f,
        gamma_f_Crest=gamma_f_Crest,
        S=S,
        Hs=Hs,
        Tmm10=Tmm10,
        Rc=Rc,
        Rc_rear=Rc_rear,
        Bc=Bc,
        rho_rock=rho_rock,
        N_waves=N_waves,
    )

    S_calculated = vangentpozueta2004.calculate_damage_number_S(
        cot_alpha=cot_alpha,
        cot_phi=cot_phi,
        gamma_f=gamma_f,
        gamma_f_Crest=gamma_f_Crest,
        Dn50=Dn50_calculated,
        Hs=Hs,
        Tmm10=Tmm10,
        Rc=Rc,
        Rc_rear=Rc_rear,
        Bc=Bc,
        rho_rock=rho_rock,
        N_waves=N_waves,
    )

    assert S_calculated == pytest.approx(S, abs=1e-2)


@pytest.mark.parametrize(
    (
        "cot_alpha, cot_phi, gamma_f, gamma_f_Crest, S, Hs, Tmm10, Rc, Rc_rear, Bc, N_waves, rho_rock, Dn50_expected"
    ),
    (
        (
            [
                3.0,
                2.0,
                0.47,
                0.47,
                2.0,
                5.0,
                10.0,
                5.0,
                5.0,
                4.0,
                1000,
                2650,
                0.555,
            ]
        ),
        (
            [
                2.5,
                2.0,
                0.47,
                0.47,
                2.0,
                5.0,
                10.0,
                5.0,
                5.0,
                4.0,
                1000,
                2650,
                0.725,
            ]
        ),
        (
            [
                3.0,
                3.0,
                0.47,
                0.47,
                2.0,
                5.0,
                10.0,
                5.0,
                5.0,
                4.0,
                1000,
                2650,
                0.469,
            ]
        ),
        (
            [
                3.0,
                2.0,
                0.55,
                0.47,
                2.0,
                5.0,
                10.0,
                5.0,
                5.0,
                4.0,
                1000,
                2650,
                0.690,
            ]
        ),
        (
            [
                3.0,
                2.0,
                0.47,
                0.55,
                2.0,
                5.0,
                10.0,
                5.0,
                5.0,
                4.0,
                1000,
                2650,
                0.600,
            ]
        ),
        (
            [
                3.0,
                2.0,
                0.47,
                0.47,
                4.0,
                5.0,
                10.0,
                5.0,
                5.0,
                4.0,
                1000,
                2650,
                0.495,
            ]
        ),
        (
            [
                3.0,
                2.0,
                0.47,
                0.47,
                2.0,
                6.0,
                10.0,
                5.0,
                5.0,
                4.0,
                1000,
                2650,
                0.696,
            ]
        ),
        (
            [
                3.0,
                2.0,
                0.47,
                0.47,
                2.0,
                5.0,
                12.0,
                5.0,
                5.0,
                4.0,
                1000,
                2650,
                0.870,
            ]
        ),
        (
            [
                3.0,
                2.0,
                0.47,
                0.47,
                2.0,
                5.0,
                10.0,
                4.5,
                5.0,
                4.0,
                1000,
                2650,
                0.651,
            ]
        ),
        (
            [
                3.0,
                2.0,
                0.47,
                0.47,
                2.0,
                5.0,
                10.0,
                5.0,
                4.5,
                4.0,
                1000,
                2650,
                0.563,
            ]
        ),
        (
            [
                3.0,
                2.0,
                0.47,
                0.47,
                2.0,
                5.0,
                10.0,
                5.0,
                5.0,
                6.0,
                1000,
                2650,
                0.535,
            ]
        ),
        (
            [
                3.0,
                2.0,
                0.47,
                0.47,
                2.0,
                5.0,
                10.0,
                5.0,
                5.0,
                4.0,
                2000,
                2650,
                0.588,
            ]
        ),
        (
            [
                3.0,
                2.0,
                0.47,
                0.47,
                2.0,
                5.0,
                10.0,
                5.0,
                5.0,
                4.0,
                1000,
                2850,
                0.524,
            ]
        ),
    ),
)
def test_Dn50_backward(
    cot_alpha,
    cot_phi,
    gamma_f,
    gamma_f_Crest,
    S,
    Hs,
    Tmm10,
    Rc,
    Rc_rear,
    Bc,
    N_waves,
    rho_rock,
    Dn50_expected,
):
    Dn50_calculated = vangentpozueta2004.calculate_nominal_rock_diameter_Dn50(
        cot_alpha=cot_alpha,
        cot_phi=cot_phi,
        gamma_f=gamma_f,
        gamma_f_Crest=gamma_f_Crest,
        S=S,
        Hs=Hs,
        Tmm10=Tmm10,
        Rc=Rc,
        Rc_rear=Rc_rear,
        Bc=Bc,
        rho_rock=rho_rock,
        N_waves=N_waves,
    )

    assert Dn50_calculated == pytest.approx(Dn50_expected, abs=5e-3)


@pytest.mark.parametrize(
    (
        "cot_alpha, cot_phi, gamma_f, gamma_f_Crest, M50, Hs, Tmm10, Rc, Rc_rear, Bc, N_waves, rho_rock, S_expected"
    ),
    (
        (
            [
                3.0,
                2.0,
                0.47,
                0.47,
                300.0,
                5.0,
                10.0,
                5.0,
                5.0,
                4.0,
                1000,
                2650,
                4.51,
            ]
        ),
        (
            [
                2.5,
                2.0,
                0.47,
                0.47,
                300.0,
                5.0,
                10.0,
                5.0,
                5.0,
                4.0,
                1000,
                2650,
                22.56,
            ]
        ),
        (
            [
                3.0,
                3.0,
                0.47,
                0.47,
                300.0,
                5.0,
                10.0,
                5.0,
                5.0,
                4.0,
                1000,
                2650,
                1.64,
            ]
        ),
        (
            [
                3.0,
                2.0,
                0.55,
                0.47,
                300.0,
                5.0,
                10.0,
                5.0,
                5.0,
                4.0,
                1000,
                2650,
                16.72,
            ]
        ),
        (
            [
                3.0,
                2.0,
                0.47,
                0.55,
                300.0,
                5.0,
                10.0,
                5.0,
                5.0,
                4.0,
                1000,
                2650,
                7.22,
            ]
        ),
        (
            [
                3.0,
                2.0,
                0.47,
                0.47,
                400.0,
                5.0,
                10.0,
                5.0,
                5.0,
                4.0,
                1000,
                2650,
                2.54,
            ]
        ),
        (
            [
                3.0,
                2.0,
                0.47,
                0.47,
                300.0,
                6.0,
                10.0,
                5.0,
                5.0,
                4.0,
                1000,
                2650,
                17.68,
            ]
        ),
        (
            [
                3.0,
                2.0,
                0.47,
                0.47,
                300.0,
                5.0,
                12.0,
                5.0,
                5.0,
                4.0,
                1000,
                2650,
                67.36,
            ]
        ),
        (
            [
                3.0,
                2.0,
                0.47,
                0.47,
                300.0,
                5.0,
                10.0,
                4.5,
                5.0,
                4.0,
                1000,
                2650,
                11.76,
            ]
        ),
        (
            [
                3.0,
                2.0,
                0.47,
                0.47,
                300.0,
                5.0,
                10.0,
                5.0,
                4.5,
                4.0,
                1000,
                2650,
                4.88,
            ]
        ),
        (
            [
                3.0,
                2.0,
                0.47,
                0.47,
                300.0,
                5.0,
                10.0,
                5.0,
                5.0,
                6.0,
                1000,
                2650,
                3.62,
            ]
        ),
        (
            [
                3.0,
                2.0,
                0.47,
                0.47,
                300.0,
                5.0,
                10.0,
                5.0,
                5.0,
                4.0,
                2000,
                2650,
                6.38,
            ]
        ),
        (
            [
                3.0,
                2.0,
                0.47,
                0.47,
                300.0,
                5.0,
                10.0,
                5.0,
                5.0,
                4.0,
                1000,
                2850,
                3.68,
            ]
        ),
    ),
)
def test_S_backward(
    cot_alpha,
    cot_phi,
    gamma_f,
    gamma_f_Crest,
    M50,
    Hs,
    Tmm10,
    Rc,
    Rc_rear,
    Bc,
    N_waves,
    rho_rock,
    S_expected,
):
    S_calculated = vangentpozueta2004.calculate_damage_number_S(
        cot_alpha=cot_alpha,
        cot_phi=cot_phi,
        gamma_f=gamma_f,
        gamma_f_Crest=gamma_f_Crest,
        M50=M50,
        Hs=Hs,
        Tmm10=Tmm10,
        Rc=Rc,
        Rc_rear=Rc_rear,
        Bc=Bc,
        rho_rock=rho_rock,
        N_waves=N_waves,
    )

    assert S_calculated == pytest.approx(S_expected, abs=1e-2)


@pytest.mark.parametrize(
    (
        "cot_alpha, cot_phi, gamma_f, gamma_f_Crest, M50, S, Tmm10, Rc, Rc_rear, Bc, N_waves, rho_rock, Hs_expected"
    ),
    (
        (
            [
                3.0,
                2.0,
                0.47,
                0.47,
                300.0,
                2.0,
                10.0,
                5.0,
                5.0,
                4.0,
                1000,
                2650,
                4.61,
            ]
        ),
        (
            [
                2.5,
                2.0,
                0.47,
                0.47,
                300.0,
                2.0,
                10.0,
                5.0,
                5.0,
                4.0,
                1000,
                2650,
                3.92,
            ]
        ),
        (
            [
                3.0,
                3.0,
                0.47,
                0.47,
                300.0,
                2.0,
                10.0,
                5.0,
                5.0,
                4.0,
                1000,
                2650,
                5.11,
            ]
        ),
        (
            [
                3.0,
                2.0,
                0.55,
                0.47,
                300.0,
                2.0,
                10.0,
                5.0,
                5.0,
                4.0,
                1000,
                2650,
                3.85,
            ]
        ),
        (
            [
                3.0,
                2.0,
                0.47,
                0.55,
                300.0,
                2.0,
                10.0,
                5.0,
                5.0,
                4.0,
                1000,
                2650,
                4.44,
            ]
        ),
        (
            [
                3.0,
                2.0,
                0.47,
                0.47,
                400.0,
                2.0,
                10.0,
                5.0,
                5.0,
                4.0,
                1000,
                2650,
                4.87,
            ]
        ),
        (
            [
                3.0,
                2.0,
                0.47,
                0.47,
                300.0,
                6.0,
                10.0,
                5.0,
                5.0,
                4.0,
                1000,
                2650,
                5.16,
            ]
        ),
        (
            [
                3.0,
                2.0,
                0.47,
                0.47,
                300.0,
                2.0,
                12.0,
                5.0,
                5.0,
                4.0,
                1000,
                2650,
                3.65,
            ]
        ),
        (
            [
                3.0,
                2.0,
                0.47,
                0.47,
                300.0,
                2.0,
                10.0,
                4.5,
                5.0,
                4.0,
                1000,
                2650,
                4.07,
            ]
        ),
        (
            [
                3.0,
                2.0,
                0.47,
                0.47,
                300.0,
                2.0,
                10.0,
                5.0,
                4.5,
                4.0,
                1000,
                2650,
                4.88,
            ]
        ),
        (
            [
                3.0,
                2.0,
                0.47,
                0.47,
                300.0,
                2.0,
                10.0,
                5.0,
                5.0,
                6.0,
                1000,
                2650,
                3.62,
            ]
        ),
        (
            [
                3.0,
                2.0,
                0.47,
                0.47,
                300.0,
                2.0,
                10.0,
                5.0,
                5.0,
                4.0,
                2000,
                2650,
                6.38,
            ]
        ),
        (
            [
                3.0,
                2.0,
                0.47,
                0.47,
                300.0,
                2.0,
                10.0,
                5.0,
                5.0,
                4.0,
                1000,
                2850,
                3.68,
            ]
        ),
    ),
)
def test_Hs_backward(
    cot_alpha,
    cot_phi,
    gamma_f,
    gamma_f_Crest,
    M50,
    S,
    Tmm10,
    Rc,
    Rc_rear,
    Bc,
    N_waves,
    rho_rock,
    Hs_expected,
):
    Hs_calculated = vangentpozueta2004.calculate_maximum_significant_wave_height_Hs(
        cot_alpha=cot_alpha,
        cot_phi=cot_phi,
        gamma_f=gamma_f,
        gamma_f_Crest=gamma_f_Crest,
        M50=M50,
        S=S,
        Tmm10=Tmm10,
        Rc=Rc,
        Rc_rear=Rc_rear,
        Bc=Bc,
        rho_rock=rho_rock,
        N_waves=N_waves,
    )

    assert Hs_calculated == pytest.approx(Hs_expected, abs=1e-2)
