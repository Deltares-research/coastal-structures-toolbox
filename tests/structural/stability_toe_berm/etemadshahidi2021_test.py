import numpy as np
import pytest

import deltares_coastal_structures_toolbox.functions.structural.stability_toe_berm.etemadshahidi2021 as etemadshahidi2021


@pytest.mark.parametrize(
    ("Hs, Tmm10, ht, Bt, tt, Dn50, rho_rock, rho_water, m, Nod_expected"),
    (
        (
            [
                0.12936,
                2.14744,
                0.371,
                0.044,
                0.029,
                0.0146,
                2700.0,
                1000.0,
                0.0,
                0.435,
            ]
        ),
        (
            [
                0.23828,
                2.72221,
                0.371,
                0.044,
                0.029,
                0.0146,
                2700.0,
                1000.0,
                0.0,
                2.238,
            ]
        ),
        (
            [
                0.24613,
                2.02284,
                0.371,
                0.044,
                0.029,
                0.0146,
                2700.0,
                1000.0,
                0.0,
                1.876,
            ]
        ),
        (
            [
                0.15930,
                2.33184,
                0.271,
                0.044,
                0.029,
                0.0146,
                2700.0,
                1000.0,
                0.0,
                0.878,
            ]
        ),
        (
            [
                0.12500,
                2.22091,
                0.171,
                0.044,
                0.029,
                0.0146,
                2700.0,
                1000.0,
                0.0,
                0.584,
            ]
        ),
        (
            [
                0.12400,
                2.12619,
                0.2416,
                0.0438,
                0.0584,
                0.0146,
                2700.0,
                1000.0,
                0.0,
                0.716,
            ]
        ),
        (
            [
                0.20097,
                1.83494,
                0.2416,
                0.0438,
                0.0584,
                0.0146,
                2700.0,
                1000.0,
                0.0,
                2.043,
            ]
        ),
    ),
)
def test_Nod_backward(
    Hs,
    Tmm10,
    ht,
    Bt,
    tt,
    Dn50,
    rho_rock,
    rho_water,
    m,
    Nod_expected,
):
    h = ht + tt

    Nod_calculated = etemadshahidi2021.calculate_damage_Nod(
        Hs=Hs,
        Tmm10=Tmm10,
        h=h,
        ht=ht,
        Bt=Bt,
        m=m,
        Dn50=Dn50,
        rho_rock=rho_rock,
        rho_water=rho_water,
    )

    assert Nod_calculated == pytest.approx(Nod_expected, abs=1e-2)


@pytest.mark.parametrize(
    ("Hs, Tmm10, ht, Bt, tt, Dn50_expected, rho_rock, rho_water, m, Nod"),
    (
        (
            [
                0.12936,
                2.14744,
                0.371,
                0.044,
                0.029,
                0.0146,
                2700.0,
                1000.0,
                0.0,
                0.435,
            ]
        ),
        (
            [
                0.23828,
                2.72221,
                0.371,
                0.044,
                0.029,
                0.0146,
                2700.0,
                1000.0,
                0.0,
                2.238,
            ]
        ),
        (
            [
                0.24613,
                2.02284,
                0.371,
                0.044,
                0.029,
                0.0146,
                2700.0,
                1000.0,
                0.0,
                1.876,
            ]
        ),
        (
            [
                0.15930,
                2.33184,
                0.271,
                0.044,
                0.029,
                0.0146,
                2700.0,
                1000.0,
                0.0,
                0.878,
            ]
        ),
        (
            [
                0.12500,
                2.22091,
                0.171,
                0.044,
                0.029,
                0.0146,
                2700.0,
                1000.0,
                0.0,
                0.584,
            ]
        ),
        (
            [
                0.12400,
                2.12619,
                0.2416,
                0.0438,
                0.0584,
                0.0146,
                2700.0,
                1000.0,
                0.0,
                0.716,
            ]
        ),
        (
            [
                0.20097,
                1.83494,
                0.2416,
                0.0438,
                0.0584,
                0.0146,
                2700.0,
                1000.0,
                0.0,
                2.043,
            ]
        ),
    ),
)
def test_Dn50_backward(
    Hs,
    Tmm10,
    ht,
    Bt,
    tt,
    Dn50_expected,
    rho_rock,
    rho_water,
    m,
    Nod,
):
    h = ht + tt

    Dn50_calculated = etemadshahidi2021.calculate_nominal_diameter_Dn50(
        Hs=Hs,
        Tmm10=Tmm10,
        h=h,
        ht=ht,
        Bt=Bt,
        m=m,
        Nod=Nod,
        rho_rock=rho_rock,
        rho_water=rho_water,
    )

    assert Dn50_calculated == pytest.approx(Dn50_expected, abs=1e-3)


@pytest.mark.parametrize(
    ("Hs_expected, Tmm10, ht, Bt, tt, Dn50, rho_rock, rho_water, m, Nod"),
    (
        (
            [
                0.12936,
                2.14744,
                0.371,
                0.044,
                0.029,
                0.0146,
                2700.0,
                1000.0,
                0.0,
                0.435,
            ]
        ),
        (
            [
                0.23828,
                2.72221,
                0.371,
                0.044,
                0.029,
                0.0146,
                2700.0,
                1000.0,
                0.0,
                2.238,
            ]
        ),
        (
            [
                0.24613,
                2.02284,
                0.371,
                0.044,
                0.029,
                0.0146,
                2700.0,
                1000.0,
                0.0,
                1.876,
            ]
        ),
        (
            [
                0.15930,
                2.33184,
                0.271,
                0.044,
                0.029,
                0.0146,
                2700.0,
                1000.0,
                0.0,
                0.878,
            ]
        ),
        (
            [
                0.12500,
                2.22091,
                0.171,
                0.044,
                0.029,
                0.0146,
                2700.0,
                1000.0,
                0.0,
                0.584,
            ]
        ),
        (
            [
                0.12400,
                2.12619,
                0.2416,
                0.0438,
                0.0584,
                0.0146,
                2700.0,
                1000.0,
                0.0,
                0.716,
            ]
        ),
        (
            [
                0.20097,
                1.83494,
                0.2416,
                0.0438,
                0.0584,
                0.0146,
                2700.0,
                1000.0,
                0.0,
                2.043,
            ]
        ),
    ),
)
def test_Hs_backward(
    Hs_expected,
    Tmm10,
    ht,
    Bt,
    tt,
    Dn50,
    rho_rock,
    rho_water,
    m,
    Nod,
):
    h = ht + tt

    Hs_calculated = etemadshahidi2021.calculate_significant_wave_height_Hs(
        Dn50=Dn50,
        Tmm10=Tmm10,
        h=h,
        ht=ht,
        Bt=Bt,
        m=m,
        Nod=Nod,
        rho_rock=rho_rock,
        rho_water=rho_water,
    )

    assert Hs_calculated == pytest.approx(Hs_expected, abs=1e-3)


@pytest.mark.parametrize(
    ("Hs, Tmm10, ht, Bt, tt, Dn50, rho_rock, rho_water, m"),
    (
        (
            [
                0.12936,
                2.14744,
                0.371,
                0.044,
                0.029,
                0.0146,
                2700.0,
                1000.0,
                0.0,
            ]
        ),
        (
            [
                0.23828,
                2.72221,
                0.371,
                0.044,
                0.029,
                0.0146,
                2700.0,
                1000.0,
                0.0,
            ]
        ),
        (
            [
                0.24613,
                2.02284,
                0.371,
                0.044,
                0.029,
                0.0146,
                2700.0,
                1000.0,
                0.0,
            ]
        ),
        (
            [
                0.15930,
                2.33184,
                0.271,
                0.044,
                0.029,
                0.0146,
                2700.0,
                1000.0,
                0.0,
            ]
        ),
        (
            [
                0.12500,
                2.22091,
                0.171,
                0.044,
                0.029,
                0.0146,
                2700.0,
                1000.0,
                0.0,
            ]
        ),
        (
            [
                0.12400,
                2.12619,
                0.2416,
                0.0438,
                0.0584,
                0.0146,
                2700.0,
                1000.0,
                0.0,
            ]
        ),
        (
            [
                0.20097,
                1.83494,
                0.2416,
                0.0438,
                0.0584,
                0.0146,
                2700.0,
                1000.0,
                0.0,
            ]
        ),
    ),
)
def test_internal_consistency_Nod_Dn50(
    Hs,
    Tmm10,
    ht,
    Bt,
    tt,
    Dn50,
    rho_rock,
    rho_water,
    m,
):
    h = ht + tt

    Nod_calculated = etemadshahidi2021.calculate_damage_Nod(
        Hs=Hs,
        Tmm10=Tmm10,
        h=h,
        ht=ht,
        Bt=Bt,
        m=m,
        Dn50=Dn50,
        rho_rock=rho_rock,
        rho_water=rho_water,
    )

    Dn50_calculated = etemadshahidi2021.calculate_nominal_diameter_Dn50(
        Hs=Hs,
        Tmm10=Tmm10,
        h=h,
        ht=ht,
        Bt=Bt,
        Nod=Nod_calculated,
        m=m,
        rho_rock=rho_rock,
        rho_water=rho_water,
    )

    assert Dn50_calculated == pytest.approx(Dn50, abs=1e-2)


@pytest.mark.parametrize(
    ("Hs, Tmm10, ht, Bt, tt, Dn50, rho_rock, rho_water, m"),
    (
        (
            [
                0.12936,
                2.14744,
                0.371,
                0.044,
                0.029,
                0.0146,
                2700.0,
                1000.0,
                0.0,
            ]
        ),
        (
            [
                0.23828,
                2.72221,
                0.371,
                0.044,
                0.029,
                0.0146,
                2700.0,
                1000.0,
                0.0,
            ]
        ),
        (
            [
                0.24613,
                2.02284,
                0.371,
                0.044,
                0.029,
                0.0146,
                2700.0,
                1000.0,
                0.0,
            ]
        ),
        (
            [
                0.15930,
                2.33184,
                0.271,
                0.044,
                0.029,
                0.0146,
                2700.0,
                1000.0,
                0.0,
            ]
        ),
        (
            [
                0.12500,
                2.22091,
                0.171,
                0.044,
                0.029,
                0.0146,
                2700.0,
                1000.0,
                0.0,
            ]
        ),
        (
            [
                0.12400,
                2.12619,
                0.2416,
                0.0438,
                0.0584,
                0.0146,
                2700.0,
                1000.0,
                0.0,
            ]
        ),
        (
            [
                0.20097,
                1.83494,
                0.2416,
                0.0438,
                0.0584,
                0.0146,
                2700.0,
                1000.0,
                0.0,
            ]
        ),
    ),
)
def test_internal_consistency_Nod_Hs(
    Hs,
    Tmm10,
    ht,
    Bt,
    tt,
    Dn50,
    rho_rock,
    rho_water,
    m,
):
    h = ht + tt

    Nod_calculated = etemadshahidi2021.calculate_damage_Nod(
        Hs=Hs,
        Tmm10=Tmm10,
        h=h,
        ht=ht,
        Bt=Bt,
        m=m,
        Dn50=Dn50,
        rho_rock=rho_rock,
        rho_water=rho_water,
    )

    Hs_calculated = etemadshahidi2021.calculate_significant_wave_height_Hs(
        Tmm10=Tmm10,
        h=h,
        ht=ht,
        Bt=Bt,
        Nod=Nod_calculated,
        m=m,
        Dn50=Dn50,
        rho_rock=rho_rock,
        rho_water=rho_water,
    )

    assert Hs_calculated == pytest.approx(Hs, abs=1e-2)


@pytest.mark.parametrize(
    ("Hs, Tmm10, ht, Bt, tt, Nod, rho_rock, rho_water, m"),
    (
        (
            [
                0.12936,
                2.14744,
                0.371,
                0.044,
                0.029,
                0.435,
                2700.0,
                1000.0,
                0.0,
            ]
        ),
        (
            [
                0.23828,
                2.72221,
                0.371,
                0.044,
                0.029,
                0.435,
                2700.0,
                1000.0,
                0.0,
            ]
        ),
        (
            [
                0.23828,
                2.72221,
                0.371,
                0.044,
                0.029,
                0.435,
                2700.0,
                1000.0,
                0.0,
            ]
        ),
        (
            [
                0.24613,
                2.02284,
                0.371,
                0.044,
                0.029,
                0.435,
                2700.0,
                1000.0,
                0.0,
            ]
        ),
        (
            [
                0.15930,
                2.33184,
                0.271,
                0.044,
                0.029,
                0.435,
                2700.0,
                1000.0,
                0.0,
            ]
        ),
        (
            [
                0.12500,
                2.22091,
                0.171,
                0.044,
                0.029,
                0.435,
                2700.0,
                1000.0,
                0.0,
            ]
        ),
        (
            [
                0.12400,
                2.12619,
                0.2416,
                0.0438,
                0.0584,
                0.435,
                2700.0,
                1000.0,
                0.0,
            ]
        ),
        (
            [
                0.20097,
                1.83494,
                0.2416,
                0.0438,
                0.0584,
                0.435,
                2700.0,
                1000.0,
                0.0,
            ]
        ),
    ),
)
def test_internal_consistency_Dn50_Hs(
    Hs,
    Tmm10,
    ht,
    Bt,
    tt,
    Nod,
    rho_rock,
    rho_water,
    m,
):
    h = ht + tt

    Dn50_calculated = etemadshahidi2021.calculate_nominal_diameter_Dn50(
        Hs=Hs,
        Tmm10=Tmm10,
        h=h,
        ht=ht,
        Bt=Bt,
        m=m,
        Nod=Nod,
        rho_rock=rho_rock,
        rho_water=rho_water,
    )

    Hs_calculated = etemadshahidi2021.calculate_significant_wave_height_Hs(
        Tmm10=Tmm10,
        h=h,
        ht=ht,
        Bt=Bt,
        Nod=Nod,
        m=m,
        Dn50=Dn50_calculated,
        rho_rock=rho_rock,
        rho_water=rho_water,
    )

    assert Hs_calculated == pytest.approx(Hs, abs=1e-2)
