import pytest

import deltares_coastal_structures_toolbox.functions.hydraulic.wave_transmission.dangremond1996 as dangremond1996


@pytest.mark.parametrize(
    ("Hsi, Tpi, Rc, B, cot_alpha, Kt_expected"),
    (
        ([2.500, 11.000, -0.400, 10.000, 1.333, 0.464]),
        ([2.500, 7.000, -0.400, 10.000, 1.333, 0.428]),
        ([4.000, 12.000, -0.550, 10.000, 1.333, 0.508]),
        ([4.000, 8.000, -0.550, 10.000, 1.333, 0.463]),
        ([2.500, 11.000, -0.400, 10.000, 2.000, 0.433]),
        ([2.500, 7.000, -0.400, 10.000, 2.000, 0.376]),
        ([4.000, 12.000, -0.550, 10.000, 2.000, 0.463]),
        ([4.000, 8.000, -0.550, 10.000, 2.000, 0.399]),
        ([2.500, 11.000, 4.600, 10.000, 2.000, 0.075]),
        ([2.500, 7.000, 4.600, 10.000, 2.000, 0.075]),
        ([4.000, 12.000, 4.450, 10.000, 2.000, 0.075]),
        ([4.000, 8.000, 4.450, 10.000, 2.000, 0.075]),
        ([2.500, 11.000, -0.400, 20.000, 2.000, 0.362]),
        ([2.500, 7.000, -0.400, 20.000, 2.000, 0.316]),
        ([4.000, 12.000, -0.550, 20.000, 2.000, 0.384]),
        ([4.000, 8.000, -0.550, 20.000, 2.000, 0.332]),
        ([2.500, 11.000, -3.400, 10.000, 1.333, 0.800]),
        ([2.500, 7.000, -3.400, 10.000, 1.333, 0.800]),
        ([4.000, 12.000, -3.550, 10.000, 1.333, 0.800]),
        ([4.000, 8.000, -3.550, 10.000, 1.333, 0.763]),
        ([2.500, 11.000, -3.400, 10.000, 2.000, 0.800]),
        ([2.500, 7.000, -3.400, 10.000, 2.000, 0.800]),
        ([4.000, 12.000, -3.550, 10.000, 2.000, 0.763]),
        ([4.000, 8.000, -3.550, 10.000, 2.000, 0.699]),
        ([2.500, 11.000, -3.400, 10.000, 2.000, 0.800]),
        ([2.500, 7.000, -3.400, 10.000, 2.000, 0.800]),
        ([4.000, 12.000, -3.550, 10.000, 2.000, 0.763]),
        ([4.000, 8.000, -3.550, 10.000, 2.000, 0.699]),
        ([2.500, 11.000, -3.400, 20.000, 2.000, 0.800]),
        ([2.500, 7.000, -3.400, 20.000, 2.000, 0.796]),
        ([4.000, 12.000, -3.550, 20.000, 2.000, 0.684]),
        ([4.000, 8.000, -3.550, 20.000, 2.000, 0.632]),
        ([2.500, 11.000, 2.600, 10.000, 1.333, 0.075]),
        ([2.500, 7.000, 2.600, 10.000, 1.333, 0.075]),
        ([4.000, 12.000, 2.450, 10.000, 1.333, 0.208]),
        ([4.000, 8.000, 2.450, 10.000, 1.333, 0.163]),
        ([2.500, 11.000, 2.600, 10.000, 2.000, 0.075]),
        ([2.500, 7.000, 2.600, 10.000, 2.000, 0.075]),
        ([4.000, 12.000, 2.450, 10.000, 2.000, 0.163]),
        ([4.000, 8.000, 2.450, 10.000, 2.000, 0.099]),
        ([2.500, 11.000, 2.600, 10.000, 2.000, 0.075]),
        ([2.500, 7.000, 2.600, 10.000, 2.000, 0.075]),
        ([4.000, 12.000, 2.450, 10.000, 2.000, 0.163]),
        ([4.000, 8.000, 2.450, 10.000, 2.000, 0.099]),
        ([2.500, 11.000, 2.600, 20.000, 2.000, 0.075]),
        ([2.500, 7.000, 2.600, 20.000, 2.000, 0.075]),
        ([4.000, 12.000, 2.450, 20.000, 2.000, 0.084]),
        ([4.000, 8.000, 2.450, 20.000, 2.000, 0.075]),
    ),
)
def test_Kt_permeable_backward(Hsi, Tpi, Rc, B, cot_alpha, Kt_expected):

    Kt_calculated = dangremond1996.calculate_wave_transmission_Kt_permeable(
        Hsi=Hsi,
        Tpi=Tpi,
        Rc=Rc,
        B=B,
        cot_alpha=cot_alpha,
    )

    assert Kt_calculated == pytest.approx(Kt_expected, abs=1e-3)


@pytest.mark.parametrize(
    ("Hsi, Tpi, Rc, B, cot_alpha, Kt_expected"),
    (
        ([2.500, 11.000, -0.400, 10.000, 1.333, 0.565]),
        ([2.500, 7.000, -0.400, 10.000, 1.333, 0.519]),
        ([4.000, 12.000, -0.550, 10.000, 1.333, 0.621]),
        ([4.000, 8.000, -0.550, 10.000, 1.333, 0.565]),
        ([2.500, 11.000, -0.400, 10.000, 2.000, 0.525]),
        ([2.500, 7.000, -0.400, 10.000, 2.000, 0.454]),
        ([4.000, 12.000, -0.550, 10.000, 2.000, 0.565]),
        ([4.000, 8.000, -0.550, 10.000, 2.000, 0.485]),
        ([2.500, 11.000, 4.600, 10.000, 2.000, 0.075]),
        ([2.500, 7.000, 4.600, 10.000, 2.000, 0.075]),
        ([4.000, 12.000, 4.450, 10.000, 2.000, 0.075]),
        ([4.000, 8.000, 4.450, 10.000, 2.000, 0.075]),
        ([2.500, 11.000, -0.400, 20.000, 2.000, 0.436]),
        ([2.500, 7.000, -0.400, 20.000, 2.000, 0.379]),
        ([4.000, 12.000, -0.550, 20.000, 2.000, 0.466]),
        ([4.000, 8.000, -0.550, 20.000, 2.000, 0.402]),
    ),
)
def test_Kt_impermeable_backward(Hsi, Tpi, Rc, B, cot_alpha, Kt_expected):

    Kt_calculated = dangremond1996.calculate_wave_transmission_Kt_permeable(
        Hsi=Hsi,
        Tpi=Tpi,
        Rc=Rc,
        B=B,
        cot_alpha=cot_alpha,
    )

    assert Kt_calculated == pytest.approx(Kt_expected, abs=1e-3)
